import unittest
from flask import json
from tests.test_base import BaseTestCase

class APIAuthTests(BaseTestCase):
    '''
    Test user creation and authentication
    '''
    def test_user_can_register(self):
        '''
        Test a new user can be added to the db
        '''
        response = self.client.post("/auth/register",
                                    data=json.dumps(dict(username="testjane",
                                                    password="test")),
                                    content_type="application/json")
        self.assertEqual(response.status_code, 201)
        response_msg = json.loads(response.data)
        self.assertIn("Testjane", response_msg["Message"])

    def test_invalid_registration(self):
        '''
        Test error (Bad Request) is raised if 
        username/password fields are empty
        '''
        response = self.client.post("/auth/register",
                                    data=json.dumps(dict(username="",
                                                    password="")),
                                    content_type="application/json")
        self.assertEqual(response.status_code, 400)

    def test_user_login_generates_token(self):
        '''
        First register a user then attempt to log them in.
        The token is autogenerated on login.
        '''
        response = self.client.post("/auth/register",
                                    data=json.dumps(dict(username="testjane",
                                                    password="test")),
                                    content_type="application/json")
        self.assertEqual(response.status_code, 201)

        response = self.client.post("/auth/login",
                                    data=json.dumps(dict(username="testjane",
                                                    password="test")),
                                    content_type="application/json")
        self.assertEqual(response.status_code, 200)
        response_msg = json.loads(response.data)
        self.assertIn("Token", response_msg)

    def test_invalid_login(self):
        '''
        Test error (Unauthorized) is raised when
        login is attempted with an invalid password
        '''
        response = self.client.post("/auth/register",
                                    data=json.dumps(dict(username="testjane",
                                                    password="testpass")),
                                    content_type="application/json")
        self.assertEqual(response.status_code, 201)

        response = self.client.post("/auth/login",
                                    data=json.dumps(dict(username="testjane",
                                                    password="invalid")),
                                    content_type="application/json")
        self.assertEqual(response.status_code, 401)


if __name__ == '__main__':
    unittest.main()
